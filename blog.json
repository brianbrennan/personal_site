{
	"a_problem_with_svgs_and_how_to_avoid_it": {
		"content": "<h1 id=\"a-problem-with-svgs-and-how-to-avoid-it\">A Problem with SVGs and How to Avoid it</h1>\n<p>I found an in­ter­est­ing bug while try­ing to ﬁnd an easy to use <span class=\"small-caps\">SVG</span> so­lu­tion al­ter­na­tives at work. I’d like to take you on the trip I went on while try­ing to solve a prob­lem, in or­der to get the full scope of this su­per niche is­sue.</p>\n<h2 id=\"svg-and-how-it-shouldn-t-be-implemented\"><span class=\"small-caps\">SVG</span> and how it <em>should­n’t</em> be im­ple­mented</h2>\n<p>Scalable Vector Graphics (SVGs) are an awe­some bit of tech­nol­ogy that al­lows you to use vec­tor ﬁles in your <span class=\"small-caps\">HTML</span> and <span class=\"small-caps\">CSS</span>, in­stead of raster im­ages. This gives you the ﬂex­i­bil­ity of be­ing able to re­size el­e­ments us­ing SVGs with­out hav­ing to worry about them look­ing pix­e­lated. However they are no­to­ri­ously an­noy­ing to work with. Not <em>dif­ﬁ­cult</em> to work with, just… an­noy­ing! There’s a litany of ref­er­ences as far as how SVGs should be im­ple­mented on front end de­vel­op­ment blogs across the web, and yet they are rarely con­sis­tent. This is mainly sur­pris­ing be­cause SVGs have been around for sev­eral years now. I re­mem­ber im­ple­ment­ing them as early as 2013, and I’m sure that their ac­tual tech spec dates back much far­ther than that.</p>\n<p>One of the ﬁrst widely im­ple­mented way to use SVGs was demon­strated by famed de­vel­oper <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> on <a href=\"https://css-tricks.com/using-svg/\">CSSTricks</a>. This ar­ti­cle is still on the ﬁrst page of google re­sults when search­ing for<span class=\"push-double\"></span> <span class=\"pull-double\">“</span><span class=\"small-caps\">SVG</span><span class=\"push-double\"></span><span class=\"pull-double\">”</span>, and un­der­stand­ably so. Now, I’m not go­ing to say any­thing bad about Chris, he’s ob­vi­ously a huge ﬁg­ure in the front end de­vel­oper com­mu­nity. But this ar­ti­cle has prob­a­bly led to some of the worst im­ple­men­ta­tions of <span class=\"small-caps\">SVG</span> that ex­ist on the web. In this ar­ti­cle he states that a good so­lu­tion for SVGs as back­ground im­ages is to en­code them in BASE-64 and then put them in your <span class=\"small-caps\">CSS</span>. There’s a huge prob­lem with this though. Well… sev­eral ac­tu­ally. The ﬁrst is that the very pur­pose of en­cod­ing things as BASE-64 is to save on per­for­mance. Your BASE-64 should be smaller than the orig­i­nal ﬁle. This can of­ten not be the case. The sec­ond is­sue is that it causes your <span class=\"small-caps\">CSS</span> to look like crap. Having a big block of ro­botic moon-speak in the mid­dle of your stylesheet is ex­tremely un­set­tling, in con­trast to the clean code I’m sure every­one has writ­ten around it. The last and se­cretly most in­sid­i­ous is­sue, arises when you start us­ing this tech­nique with a pre­proces­sor like <span class=\"small-caps\">LESS</span> or <span class=\"small-caps\">SASS</span>.</p>\n<p>Let’s say you want to start us­ing SVGs, in your nifty new pre­proces­sor lan­guage that you’ve started to use, but maybe haven’t got­ten a full grasp on how ei­ther work yet. So you stum­ble upon this afore­men­tioned ar­ti­cle, and de­cide to put that an­droid-bab­ble into a vari­able in your stylesheet. Maybe, be­cause you’re a bit more ad­vanced, you want to put it in a mixin. Let’s say that this is for a com­monly used icon, and you pro­ceed to ref­er­ence that vari­able or mixin all over the place, and your code looks much cleaner than if you were to try and put a big block of garbage all over the place. And you smile at how clean your code looks, com­pile your stylesheet, and give your­self a pat on the back for how good of a job you’ve done.</p>\n<p>Except, that block of garbage can’t get<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>referenced” in your com­piled <span class=\"small-caps\">CSS</span> now, it needs to be put in every place you want that <span class=\"small-caps\">SVG</span> to show up. Every… sin­gle… place. If you do ex­actly what I just men­tioned, there’s no shame in it. It’s a to­tally un­der­stand­able mis­take, but yeah you might want to ﬁx that. If you make this mis­take, your un­wit­tingly get­ting rid of one of the best ben­e­ﬁts of <span class=\"small-caps\">SVG</span>: per­for­mance. Instead, you’re clog­ging up your style re­quest with all of this BASE-64 non­sense.</p>\n<h2 id=\"how-svgs-should-be-implemented\">How SVGs <em>should</em> be im­ple­mented</h2>\n<p>Now, this is one par­tic­u­lar bad way to im­ple­ment this, but how can we ﬁx it, and what are some other so­lu­tions? SVGs are very ﬂex­i­ble in the way of how they can be im­ple­mented, and like I’ve said, there is lit­tle con­sis­tency on which way is best. In my mind, there are two ways that an <span class=\"small-caps\">SVG</span> can and should be im­ple­mented, and they both have their ben­e­ﬁt. The ﬁrst is to use them in­line. SVGs can be in­jected di­rectly into your markup. This al­lows you the added ben­e­ﬁt of be­ing able to dy­nam­icly ma­nip­u­late them. Once an <span class=\"small-caps\">SVG</span> is in­line, you can think of it as be­ing drawn when the page is be­ing painted by the browser, but it can be up­dated via <span class=\"small-caps\">CSS</span> as well. A sim­ple ex­am­ple of this hav­ing an icon, that once hov­ered over, will change the ﬁll color from blue to red.</p>\n<pre><code class=\"lang-HTML\">&lt;!-- in your HTML --&gt;\n    &lt;svg&gt;\n        &lt;path&gt;&lt;/path&gt; &lt;!-- part of your svg icon --&gt;\n        .\n        .\n        .\n    &lt;/svg&gt;\n</code></pre>\n<pre><code class=\"lang-SASS\">     //In your Stylesheet (sass in this example)\n    svg {\n        path {\n            fill: blue;\n        }\n\n        &amp;: hover {\n            path {\n                fill: red;\n            }\n        }\n    }\n</code></pre>\n",
		"meta": {
			"creationDate": "2017-11-24T05:27:57.963Z",
			"lastEdited": "2017-11-24T05:27:57.964Z",
			"tags": [
				"SVG"
			],
			"title": "A Problem with SVGs and How to Avoid It"
		}
	},
	"bang_bang_youre_boolean": {
		"content": "<h1 id=\"boolean-evalulation-in-non-strictly-typed-javascript\">Boolean eval­u­la­tion in non-strictly typed JavaScript</h1>\n<p>JavaScript typ­ing is a topic of de­bate that is cur­rently rag­ing in the world of frame­works. How should things be typed in JS? Should it mimic strongly typed lan­guages? Or should some of the weird­ness of <span class=\"small-caps\">JS</span> be em­braced and ex­panded upon with its own syn­tac­tic sugar. Well, the jury is still out on that one, but its easy to see for our lit­tle run­time-lan­guage-that-could has a fu­ture in­volv­ing a much stricter rule-set. But if you don’t feel like pick­ing up some­thing like TypeScript or <span class=\"small-caps\">ES6</span>, then there’s some cool nu­ances that are good to have in your back pocket.</p>\n<h2 id=\"you-re-just-not-my-type\">You’re just not my type</h2>\n<p>Boolean typ­ing in <span class=\"small-caps\">JS</span> is a bit weird. And it mainly has to do with how val­ues are read in and sub­se­quently eval­u­ated. If you don’t know what truthy and falsey val­ues in <span class=\"small-caps\">JS</span> are, they’re ba­si­cally val­ues that are get­ting eval­u­ated to a boolean with­out ac­tu­ally chang­ing the value of the operand. The fol­low­ing val­ues are falsey:</p>\n<ul>\n<li><code>false</code>,</li>\n<li><code>0</code> (zero),</li>\n<li><code>&#39;&#39;</code> (empty string),</li>\n<li><code>null</code>,</li>\n<li><code>undefined</code>,</li>\n<li><code>NaN</code></li>\n</ul>\n<p>And here’s the val­ues that are truthy</p>\n<ul>\n<li><em>Literally every­thing else</em></li>\n</ul>\n<p>Seems fairly sim­ple right? If some­thing is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>bad” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>doesn’t ex­ist”, it’s <code>false</code>. Something that is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>good” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>does ex­ist” is <code>true</code>. Simple! Well, not quite. Boolean val­ues in <span class=\"small-caps\">JS</span> have some weird nu­ances in­volv­ing de­c­la­ra­tion state­ments and im­ple­men­ta­tions. Here’s a list of some of the an­noy­ing ones and how to deal with them.</p>\n<h2 id=\"-1-is-true-even-in-0-indexed-arrays\">-1 is true, even in 0 in­dexed ar­rays</h2>\n<p>This one is a per­sonal pet peeve. I know that there is prob­a­bly a deeply in­grained rea­son for this, but it does­n’t make it any less an­noy­ing. As you can see from the list above of falsey val­ues, the only nu­mer­i­cal one is <code>0</code> (okay tech­ni­cally <code>NaN</code> is as well but shush). If you have some sort of equa­tion or out­put that equals <code>0</code>, then it is con­sid­ered <code>false</code>. This can be­come prob­lem­atic when deal­ing with po­si­tion­ing within ar­rays. When you want to ﬁnd the <code>indexOf</code> an item in an ar­ray, the re­turned value is <code>-1</code> if the item does­n’t ex­ist in the ar­ray. Remember how I said that things that are<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>bad” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>don’t ex­ist” are falsey? Whelp, not in this case. If you try to search for the let­ter <code>&quot;k&quot;</code> in the word <code>&quot;fabric&quot;</code>, and try to eval­u­ate the boolean na­ture of that state­ment, it will come out as true. But there’s more. If you try to ﬁnd the po­si­tion of <code>&quot;f&quot;</code> in the word <code>&quot;fabric&quot;</code>, you will get the cor­rect po­si­tion of <code>0</code>, the ﬁrst item in a zero-in­dexed ar­ray, and that state­ment eval­u­ates as false. Again, I’m sure there’s a rea­son that the gods of pro­gram­ming de­cided to keep this the way it is, but would­n’t it be much eas­ier if you could just just say</p>\n<pre><code class=\"lang-javascript\">if(array.indexOf(1)) {\n    //some statement based on truthiness\n} else {\n   //some statement based on falsiness\n}\n</code></pre>\n<h2 id=\"nan-does-not-equal-itself\">NaN does not equal it­self</h2>\n<p>A fea­ture of most boolean val­ues is that they have a prop­erty of iden­tity. If you were to com­pare most val­ues to it­self within a boolean op­er­a­tion, you’d get <code>true</code>. Want to see if some­thing eval­u­ates to <code>true</code>? Just com­pare it to <code>true</code>. Trying to check if a prop­erty is <code>undefined</code>? Just write <code>property === undefined</code>. There is a no­table ex­cep­tion to this rule, and its name is <code>NaN</code>. Not-a-Number is a spe­cial Numerical value that is some­what rarer than other prob­lem chil­dren like <code>undefined</code> and <code>null</code>, but that does­n’t mean it is­n’t tricky to eval­u­ate via <code>boolean</code>. Lets say you wanted to do and er­ror check for a spe­ciﬁc in­put that a user has given you. Lets say that by the most per­fect storm of ter­ri­ble in­putting, they get a value of <code>NaN</code>. How do you check for that? Well surely you should be able to just write <code>inputValue === NaN</code>, right? Wrong. <code>NaN === NaN</code> eval­u­ates to <code>false</code>. It does­n’t equal it­self. Now, again, I know there’s a per­fectly good rea­son as to why this is the case, and re­ly­ing on <code>NaN</code> for er­ror check­ing is pretty ter­ri­ble pro­gram­ming, but nonethe­less, hav­ing weird­ness with fun­da­men­tal val­ues can cer­tainly lead to some hair pulling if you aren’t care­ful.</p>\n<h2 id=\"bang-bang-you-re-a-boolean\">Bang Bang, you’re a boolean</h2>\n<p>This nu­ance is prob­a­bly my fa­vorite, and its re­ally just be­cause I read the best com­ment about it when I was try­ing to ﬁg­ure it out. JavaScript not be­ing strongly typed can def­i­nitely lead to com­edy. Lets say you have a value, and you want to re­turn its truthi­ness or falsi­ness. But what if you’re us­ing some sort of lint­ing pro­gram that pre­vents non-strict com­par­isons? And what if you don’t want to re­turn <code>true</code> if the value is <code>undefined</code>, but <code>false</code> if its <code>null</code>. Well, there’s a slightly ob­scured, amaz­ing way to say<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>no, this is a true blue boolean, not some of that pseudo boolean eval­u­a­tion stuff”.</p>\n<pre><code class=\"lang-javascript\">!!(x)\n</code></pre>\n<p>A <code>!</code> char­ac­ter in boolean con­text ba­si­cally means<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>take what­ev­ers af­ter this and make it op­po­site”. The dou­ble-bang op­er­a­tor can quickly be de­scribed as <span class=\"small-caps\">NOT</span> <span class=\"small-caps\">NOT</span>. As well all know from 3rd grade eng­lish class, dou­ble neg­a­tives aren’t the best way to write things, but they do get the job done in this case.</p>\n<p>This ex­pres­sion will re­turn true, or false de­pend­ing on the value of <code>x</code>. I’m go­ing to have to give credit to Gus on stack over­ﬂow for com­ing up with the best jin­gle for this. <a href=\"http://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript\">http://​stack­over­ﬂow.com/​ques­tions/​784929/​what-is-the-not-not-op­er­a­tor-in-javascript</a>.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Bang Bang, you’re boolean”. It works bests if you point ﬁn­ger-guns at your screen and make guns noises while run­ning your code by the way.</p>\n",
		"meta": {
			"creationDate": "2017-11-24T05:27:57.964Z",
			"lastEdited": "2017-11-24T05:27:57.965Z",
			"tags": [
				"Javascript",
				"js",
				"es2015"
			],
			"title": "Bang Bang, You're Boolean"
		}
	}
}